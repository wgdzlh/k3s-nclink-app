// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package configmodel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelServClient is the client API for ModelServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServClient interface {
	SaveModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*OpRet, error)
	DeleteModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*OpRet, error)
	UpdateModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*OpRet, error)
	FindModels(ctx context.Context, in *Filter, opts ...grpc.CallOption) (ModelServ_FindModelsClient, error)
}

type modelServClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServClient(cc grpc.ClientConnInterface) ModelServClient {
	return &modelServClient{cc}
}

func (c *modelServClient) SaveModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*OpRet, error) {
	out := new(OpRet)
	err := c.cc.Invoke(ctx, "/configmodel.ModelServ/SaveModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServClient) DeleteModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*OpRet, error) {
	out := new(OpRet)
	err := c.cc.Invoke(ctx, "/configmodel.ModelServ/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServClient) UpdateModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*OpRet, error) {
	out := new(OpRet)
	err := c.cc.Invoke(ctx, "/configmodel.ModelServ/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServClient) FindModels(ctx context.Context, in *Filter, opts ...grpc.CallOption) (ModelServ_FindModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelServ_ServiceDesc.Streams[0], "/configmodel.ModelServ/FindModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelServFindModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelServ_FindModelsClient interface {
	Recv() (*Model, error)
	grpc.ClientStream
}

type modelServFindModelsClient struct {
	grpc.ClientStream
}

func (x *modelServFindModelsClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelServServer is the server API for ModelServ service.
// All implementations must embed UnimplementedModelServServer
// for forward compatibility
type ModelServServer interface {
	SaveModel(context.Context, *Model) (*OpRet, error)
	DeleteModel(context.Context, *Model) (*OpRet, error)
	UpdateModel(context.Context, *Model) (*OpRet, error)
	FindModels(*Filter, ModelServ_FindModelsServer) error
	mustEmbedUnimplementedModelServServer()
}

// UnimplementedModelServServer must be embedded to have forward compatible implementations.
type UnimplementedModelServServer struct {
}

func (UnimplementedModelServServer) SaveModel(context.Context, *Model) (*OpRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveModel not implemented")
}
func (UnimplementedModelServServer) DeleteModel(context.Context, *Model) (*OpRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelServServer) UpdateModel(context.Context, *Model) (*OpRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelServServer) FindModels(*Filter, ModelServ_FindModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindModels not implemented")
}
func (UnimplementedModelServServer) mustEmbedUnimplementedModelServServer() {}

// UnsafeModelServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServServer will
// result in compilation errors.
type UnsafeModelServServer interface {
	mustEmbedUnimplementedModelServServer()
}

func RegisterModelServServer(s grpc.ServiceRegistrar, srv ModelServServer) {
	s.RegisterService(&ModelServ_ServiceDesc, srv)
}

func _ModelServ_SaveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServServer).SaveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmodel.ModelServ/SaveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServServer).SaveModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelServ_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmodel.ModelServ/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServServer).DeleteModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelServ_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configmodel.ModelServ/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServServer).UpdateModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelServ_FindModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelServServer).FindModels(m, &modelServFindModelsServer{stream})
}

type ModelServ_FindModelsServer interface {
	Send(*Model) error
	grpc.ServerStream
}

type modelServFindModelsServer struct {
	grpc.ServerStream
}

func (x *modelServFindModelsServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

// ModelServ_ServiceDesc is the grpc.ServiceDesc for ModelServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configmodel.ModelServ",
	HandlerType: (*ModelServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveModel",
			Handler:    _ModelServ_SaveModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelServ_DeleteModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelServ_UpdateModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindModels",
			Handler:       _ModelServ_FindModels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "configmodel-model.proto",
}
